
--ORIGEN

CREATE FUNCTION FN_HC_GET_DESC_ESTADO_SINCRO(@COD_ESTADO_SINCRO VARCHAR(3))
RETURNS VARCHAR(100)
AS
BEGIN
	RETURN 
        CASE @COD_ESTADO_SINCRO
        WHEN 'PEN' THEN 'Pendiente'
		WHEN 'FIN' THEN 'Sincronizado'
		WHEN 'OMI' THEN 'Omitido'
		WHEN 'ERR' THEN 'Error'
        WHEN 'APE' THEN 'Anulación Pendiente'
		WHEN 'AFI' THEN 'Anulación Finalizada'
		WHEN 'AOM' THEN 'Anulación Omitida'
		WHEN 'AER' THEN 'Anulación Error'
		ELSE '' 
		END

END
GO

IF EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'HC_SINCRO_STOCK_MOVIMIENTO_ORIGEN')
	DROP TABLE HC_SINCRO_STOCK_MOVIMIENTO_ORIGEN
GO

CREATE TABLE HC_SINCRO_STOCK_MOVIMIENTO_ORIGEN
(
ID_HC_SINCRO_STOCK_MOVIMIENTO_ORIGEN INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
ORIG_ID_STA14 INT NOT NULL,
ORIG_TCOMP_IN_S VARCHAR(2) COLLATE Latin1_General_BIN NOT NULL,
ORIG_NCOMP_IN_S VARCHAR(8) COLLATE Latin1_General_BIN NOT NULL,
ORIG_T_COMP VARCHAR(3) COLLATE Latin1_General_BIN NOT NULL,
ORIG_N_COMP VARCHAR(14) COLLATE Latin1_General_BIN NOT NULL,
ORIG_COD_PRO_CL VARCHAR(6) COLLATE Latin1_General_BIN NOT NULL,
ORIG_ESTADO_MOV VARCHAR(1) COLLATE Latin1_General_BIN NOT NULL,
ORIG_FECHA_MOV DATETIME NOT NULL,
ESTADO_SINCRO VARCHAR(3) NOT NULL,
DETALLE_ULTIMA_SINCRO VARCHAR(MAX),
FECHA_ULTIMA_SINCRO DATETIME NOT NULL,
CANT_INTENTOS INT NOT NULL,
DEST_T_COMP VARCHAR(3) COLLATE Latin1_General_BIN,
DEST_N_COMP VARCHAR(14) COLLATE Latin1_General_BIN,
DEST_TCOMP_IN_S VARCHAR(2) COLLATE Latin1_General_BIN,
DEST_NCOMP_IN_S VARCHAR(8) COLLATE Latin1_General_BIN,
DEST_ANU_T_COMP VARCHAR(3) COLLATE Latin1_General_BIN,
DEST_ANU_N_COMP VARCHAR(14) COLLATE Latin1_General_BIN,
DEST_ANU_TCOMP_IN_S VARCHAR(2) COLLATE Latin1_General_BIN,
DEST_ANU_NCOMP_IN_S VARCHAR(8) COLLATE Latin1_General_BIN

)

CREATE UNIQUE NONCLUSTERED INDEX IX_0 ON HC_SINCRO_STOCK_MOVIMIENTO_ORIGEN
(
	--ORIG_TCOMP_IN_S,
	--ORIG_NCOMP_IN_S
	ORIG_ID_STA14
)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_1 ON HC_SINCRO_STOCK_MOVIMIENTO_ORIGEN
(
	DEST_TCOMP_IN_S,
	DEST_NCOMP_IN_S
)
WHERE DEST_TCOMP_IN_S IS NOT NULL AND DEST_ANU_NCOMP_IN_S IS NOT NULL
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_2 ON HC_SINCRO_STOCK_MOVIMIENTO_ORIGEN
(
	DEST_ANU_TCOMP_IN_S,
	DEST_ANU_NCOMP_IN_S
)
WHERE DEST_ANU_TCOMP_IN_S IS NOT NULL AND DEST_ANU_NCOMP_IN_S IS NOT NULL
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO


IF EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'HC_SINCRO_STOCK_MOVIMIENTO_OMITIR')
	DROP TABLE HC_SINCRO_STOCK_MOVIMIENTO_OMITIR
GO

CREATE TABLE HC_SINCRO_STOCK_MOVIMIENTO_OMITIR
(
ID_HC_SINCRO_STOCK_MOVIMIENTO_OMITIR BIGINT NOT NULL IDENTITY(1,1) PRIMARY KEY,
ORIG_ID_STA14 INT NOT NULL,
--ORIG_TCOMP_IN_S VARCHAR(2) COLLATE Latin1_General_BIN,
--ORIG_NCOMP_IN_S VARCHAR(8) COLLATE Latin1_General_BIN,
FECHA_REGISTRO_OMISION DATETIME NOT NULL DEFAULT GETDATE()
)

CREATE UNIQUE NONCLUSTERED INDEX IX_0 ON HC_SINCRO_STOCK_MOVIMIENTO_OMITIR
(
	--ORIG_TCOMP_IN_S,
	--ORIG_NCOMP_IN_S
	ORIG_ID_STA14
)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO








ALTER PROCEDURE [dbo].[SP_HC_SINCRO_STOCK_MOVIMIENTOS_PENDIENTES] 
--@ANTIGUEDAD_MAX_DIAS INT
@MODO_EJECUCION VARCHAR(1)
AS

BEGIN

SELECT 
SINCRO.ID_HC_SINCRO_STOCK_MOVIMIENTO_ORIGEN,
CALC.ORIG_ID_STA14 AS ORIG_ID_STA14,
CALC.ORIG_TCOMP_IN_S,
CALC.ORIG_NCOMP_IN_S,
CALC.ORIG_T_COMP,
CALC.ORIG_N_COMP,
CALC.ORIG_COD_PRO_CL,
CALC.ORIG_ESTADO_MOV,
CALC.ORIG_FECHA_MOV,
CALC.ESTADO_SINCRO,
SINCRO.DETALLE_ULTIMA_SINCRO,
SINCRO.FECHA_ULTIMA_SINCRO,
SINCRO.CANT_INTENTOS,
SINCRO.DEST_T_COMP,
SINCRO.DEST_N_COMP,
SINCRO.DEST_TCOMP_IN_S,
SINCRO.DEST_NCOMP_IN_S,
SINCRO.DEST_ANU_TCOMP_IN_S,
SINCRO.DEST_ANU_NCOMP_IN_S,
SINCRO.DEST_ANU_T_COMP,
SINCRO.DEST_ANU_N_COMP,
IIF(SINCRO_OMITIR.ID_HC_SINCRO_STOCK_MOVIMIENTO_OMITIR IS NULL, 0, 1) OMISION_EXTERNA
INTO #TMP_MOV_PEN
FROM 
STA14
FULL JOIN HC_SINCRO_STOCK_MOVIMIENTO_ORIGEN AS SINCRO ON STA14.ID_STA14 = SINCRO.ORIG_ID_STA14
CROSS APPLY
(SELECT ISNULL(SINCRO.ORIG_ID_STA14, STA14.ID_STA14) AS ORIG_ID_STA14,
		IIF(STA14.ID_STA14 IS NULL, SINCRO.ORIG_FECHA_MOV, STA14.FECHA_MOV) AS ORIG_FECHA_MOV,
		IIF(STA14.ID_STA14 IS NULL, SINCRO.ORIG_TCOMP_IN_S, STA14.TCOMP_IN_S) AS ORIG_TCOMP_IN_S,
		IIF(STA14.ID_STA14 IS NULL, SINCRO.ORIG_NCOMP_IN_S, STA14.NCOMP_IN_S) AS ORIG_NCOMP_IN_S,
		IIF(STA14.ID_STA14 IS NULL, SINCRO.ORIG_T_COMP, STA14.T_COMP) AS ORIG_T_COMP,
		IIF(STA14.ID_STA14 IS NULL, SINCRO.ORIG_N_COMP, STA14.N_COMP) AS ORIG_N_COMP,
		IIF(STA14.ID_STA14 IS NULL, SINCRO.ORIG_COD_PRO_CL, STA14.COD_PRO_CL) AS ORIG_COD_PRO_CL,
		ISNULL(SINCRO.ESTADO_SINCRO,'PEN') AS ESTADO_SINCRO,
		IIF(STA14.ID_STA14 IS NULL, 'A', STA14.ESTADO_MOV) AS ORIG_ESTADO_MOV
		) AS CALC
LEFT JOIN HC_SINCRO_STOCK_MOVIMIENTO_OMITIR AS SINCRO_OMITIR ON CALC.ORIG_ID_STA14 = SINCRO_OMITIR.ORIG_ID_STA14
WHERE
(
CALC.ESTADO_SINCRO IN ('PEN', 'ERR', 'APE', 'AER')
OR 
(CALC.ESTADO_SINCRO = 'FIN' AND CALC.ORIG_ESTADO_MOV = 'A')
)
AND 
(
	SINCRO.ID_HC_SINCRO_STOCK_MOVIMIENTO_ORIGEN IS NOT NULL
	OR 
	(--(@ANTIGUEDAD_MAX_DIAS IS NULL OR DATEDIFF(DAY, STA14.FECHA_MOV, GETDATE()) <= @ANTIGUEDAD_MAX_DIAS)
	--AND 
	STA14.TCOMP_IN_S IN ('FC', 'FR', 'CC', 'DC', 'RE', 'DR'))
);

CREATE UNIQUE INDEX IX_0 ON #TMP_MOV_PEN
(
	ORIG_ID_STA14
);

CREATE INDEX IX_1 ON #TMP_MOV_PEN
(
	ESTADO_SINCRO
);


--Modo datos para sincronizar
IF @MODO_EJECUCION = 'S'
BEGIN

SELECT * FROM #TMP_MOV_PEN
ORDER BY ORIG_ID_STA14;

SELECT 
STA14.ID_STA14,
STA14.FECHA_MOV,
STA14.TCOMP_IN_S,
STA14.NCOMP_IN_S,
STA14.T_COMP,
STA14.N_COMP,
STA14.COD_PRO_CL,
CASE WHEN ISNULL(STA14.FECHA_ANU,'18000101') = '18000101' THEN NULL ELSE STA14.FECHA_ANU END AS FECHA_ANU,
STA14.ESTADO_MOV
FROM #TMP_MOV_PEN AS TMP
INNER JOIN STA14 ON TMP.ORIG_ID_STA14 = STA14.ID_STA14
ORDER BY STA14.ID_STA14;

SELECT 
STA14.ID_STA14,
STA20.ID_STA20,
STA20.TCOMP_IN_S,
STA20.NCOMP_IN_S,
STA20.N_RENGL_S,
STA20.COD_ARTICU,
STA11.USA_PARTID,
STA20.COD_DEPOSI,
STA20.TIPO_MOV,
STA20.CANTIDAD,
CASE WHEN STA20.COD_DEPOSI = '20' THEN '20' ELSE '01' END AS COD_DEPOSI_DESTINO
FROM #TMP_MOV_PEN AS TMP
INNER JOIN STA14 ON TMP.ORIG_ID_STA14 = STA14.ID_STA14
INNER JOIN STA20 ON STA14.TCOMP_IN_S = STA20.TCOMP_IN_S AND STA14.NCOMP_IN_S = STA20.NCOMP_IN_S
INNER JOIN STA11 ON STA20.COD_ARTICU = STA11.COD_ARTICU
WHERE 
STA11.PROMO_MENU <> 'P'
ORDER BY STA14.ID_STA14, STA20.ID_STA20;

END

--Modo estadística errores sincro
ELSE IF @MODO_EJECUCION = 'C'
BEGIN
	SELECT COUNT(1) FROM #TMP_MOV_PEN WHERE ESTADO_SINCRO IN ('ERR', 'AER') AND CANT_INTENTOS > 1;
END

--Reporte movimientos pendientes
ELSE IF @MODO_EJECUCION = 'R'
BEGIN

	SELECT 
	CAST('' AS VARCHAR(1)) AS OMITIR,
	TMP.ORIG_FECHA_MOV AS FECHA_MOV,
	DBO.FN_HC_GET_TIPO_COMP_STOCK(TMP.ORIG_TCOMP_IN_S) AS COMPROBANTE,
	TMP.ORIG_TCOMP_IN_S AS TIPO_INTERNO,
	TMP.ORIG_NCOMP_IN_S AS NRO_INTERNO,
	CALC.ESTADO_MOV,
	CASE WHEN CALC.ESTADO_MOV = 'A' THEN (CASE WHEN STA14.ID_STA14 IS NULL THEN 'Eliminado' ELSE 'Anulado' END) ELSE '' END AS TIPO_ANU,
	TMP.ORIG_T_COMP AS TIPO,
	TMP.ORIG_N_COMP AS NRO,
	TMP.ORIG_COD_PRO_CL AS COD_CLIENTE,
	IIF(TMP.ORIG_COD_PRO_CL = '000000', GVA38.RAZON_SOCI, GVA14.RAZON_SOCI) AS RAZON_SOCIAL,
	DBO.FN_HC_GET_DESC_ESTADO_SINCRO(TMP.ESTADO_SINCRO) AS ESTADO_SINCRO,
	TMP.FECHA_ULTIMA_SINCRO,
	TMP.DETALLE_ULTIMA_SINCRO
	FROM #TMP_MOV_PEN AS TMP
	LEFT JOIN STA14 ON TMP.ORIG_ID_STA14 = STA14.ID_STA14
	LEFT JOIN GVA14 ON TMP.ORIG_COD_PRO_CL = GVA14.COD_CLIENT
	LEFT JOIN GVA38 ON STA14.T_COMP = GVA38.T_COMP AND STA14.N_COMP = GVA38.N_COMP
	CROSS APPLY
	(SELECT IIF(STA14.ID_STA14 IS NOT NULL, STA14.ESTADO_MOV, TMP.ORIG_ESTADO_MOV)  AS ESTADO_MOV) AS CALC
	WHERE TMP.ESTADO_SINCRO IN ('PEN', 'APE', 'ERR','AER')
	ORDER BY TMP.ORIG_ID_STA14;
	
END

ELSE
	RAISERROR('Modo de ejecución inválido',16,1);

END


GO


GO



ALTER  PROCEDURE [dbo].[SP_HC_SINCRO_STOCK_MOVIMIENTO_OMITIR] @XML_TXT VARCHAR(MAX)
       
AS      
BEGIN      

 
	SET DATEFORMAT YMD;

	DECLARE @TIPO_TRAN VARCHAR(1) = NULL
     
	DECLARE @PARSED_XML XML,  
	@ERROR VARCHAR(MAX) = '',
	@CANT_MOV INT
     
	BEGIN TRY      
     
		--SET @FECHA_BAJA = CONVERT(DATE, @FECHA_BAJA)
     
		IF ISNULL(@XML_TXT, '') = ''      
		BEGIN      
			RAISERROR('Debe especificar el valor del parámetro @XML_TXT', 16,1);      
			RETURN;
		END      
     
		IF TRY_CONVERT(xml, @XML_TXT) IS NULL      
		BEGIN      
			RAISERROR('No se pudo convertir correctamente a XML el string pasado como parámetro', 16,1);      
			RETURN;
		END      
     
		SET @PARSED_XML = CONVERT(XML,@XML_TXT)


		SELECT DISTINCT
		CALC.*,
		ISNULL(STA14.ID_STA14, O.ORIG_ID_STA14) AS ID_STA14,
		CONVERT(INT, 0) AS COD_WARNING,
		CONVERT(INT, 0) AS COD_ERROR,
		CONVERT(VARCHAR(MAX), '') AS MSJ_ERROR
		INTO #TMP_MOV
		FROM      
		@PARSED_XML.nodes(N'//M') AS Movimientos(Mov)      
		CROSS APPLY (SELECT      
		 Mov.value(N'./@NF', N'int') AS NRO_FILA,      
		 Mov.value(N'./@T', N'varchar(1000)') COLLATE LATIN1_GENERAL_BIN AS TCOMP_IN_S,
		 Mov.value(N'./@N', N'varchar(1000)') COLLATE LATIN1_GENERAL_BIN AS NCOMP_IN_S
		) AS CALC
		LEFT JOIN STA14 ON CALC.TCOMP_IN_S = STA14.TCOMP_IN_S AND CALC.NCOMP_IN_S = STA14.NCOMP_IN_S
		LEFT JOIN HC_SINCRO_STOCK_MOVIMIENTO_ORIGEN AS O ON CALC.TCOMP_IN_S = O.ORIG_TCOMP_IN_S AND CALC.NCOMP_IN_S = O.ORIG_NCOMP_IN_S
		--ORDER BY CALC.NRO_FILA, STA14.ID_STA14;

		
		SET @CANT_MOV = (SELECT COUNT(1) FROM #TMP_MOV)

		IF @CANT_MOV = 0
			RETURN;

		--Se procesan validaciones
		UPDATE T SET COD_ERROR = CALC1.COD_ERROR, MSJ_ERROR = CALC2.MSJ_ERROR
		FROM #TMP_MOV AS T
		LEFT JOIN HC_SINCRO_STOCK_MOVIMIENTO_ORIGEN AS O ON T.ID_STA14 = O.ORIG_ID_STA14
		LEFT JOIN STA14 ON T.ID_STA14 = STA14.ID_STA14
		CROSS APPLY (SELECT CASE
			WHEN T.ID_STA14 IS NULL THEN 1
			WHEN ISNULL(O.ESTADO_SINCRO,'PEN') NOT IN ('PEN', 'APE', 'ERR','AER') AND NOT (O.ESTADO_SINCRO = 'FIN' AND IIF(STA14.ID_STA14 IS NULL, O.ORIG_ESTADO_MOV, STA14.ESTADO_MOV) = 'A') THEN 2
			ELSE 0
			END AS COD_ERROR) AS CALC1
			CROSS APPLY (SELECT CASE CALC1.COD_ERROR
				WHEN 1 THEN 'No se encontró el movimiento en la base de datos'
				WHEN 2 THEN 'El movimiento no se encuentra en un estado de sincronización válido para omitir (' + ISNULL(O.ESTADO_SINCRO,'PEN') + ')'
				ELSE ''
				END AS MSJ_ERROR) AS CALC2
		WHERE CALC1.COD_ERROR <> 0;


		SET @ERROR = (SELECT ' Fila: ' + CONVERT(VARCHAR(MAX), NRO_FILA) + ' | ' + CONVERT(VARCHAR(2000),T.MSJ_ERROR)
				     FROM #TMP_MOV AS T
					 WHERE T.NRO_FILA = (SELECT MIN(NRO_FILA) FROM #TMP_MOV WHERE COD_ERROR <> 0))
		
			IF ISNULL(@ERROR, '')  = ''
			BEGIN

				----
				IF @@TRANCOUNT=0
				BEGIN
					BEGIN TRANSACTION
					SET @TIPO_TRAN='T'
				END
				ELSE
				BEGIN
					SAVE TRANSACTION SP_HC_SINC_OMITIR
					SET @TIPO_TRAN='S'
				END
				----


				--Bien
				INSERT INTO HC_SINCRO_STOCK_MOVIMIENTO_OMITIR (ORIG_ID_STA14)
				SELECT T.ID_STA14 
				FROM #TMP_MOV AS T 
				LEFT JOIN HC_SINCRO_STOCK_MOVIMIENTO_OMITIR AS O ON T.ID_STA14 = O.ORIG_ID_STA14
				WHERE O.ID_HC_SINCRO_STOCK_MOVIMIENTO_OMITIR IS NULL
				ORDER BY T.ID_STA14

				IF @TIPO_TRAN IS NOT NULL
					COMMIT;
		 
			END
			
			ELSE
			BEGIN
				RAISERROR('%s',16,1, @ERROR)
				RETURN;
			END


	END TRY      
	BEGIN CATCH      
     
		DECLARE @ERROR_NUMBER INT

		SET @ERROR = ERROR_MESSAGE();
		IF ERROR_NUMBER() = 0
			SELECT @ERROR_NUMBER = -1
		ELSE 
			SELECT @ERROR_NUMBER = ERROR_NUMBER()

		IF @@TRANCOUNT > 0
		BEGIN
		  IF @TIPO_TRAN = 'T'
			 ROLLBACK
		  ELSE IF @TIPO_TRAN = 'S'
			 ROLLBACK TRANSACTION SP_HC_SINC_OMITIR
		END

		RAISERROR('%s', 16,1, @ERROR)
		RETURN @ERROR_NUMBER;
     
	END CATCH      
     
END

GO






--AMBOS

CREATE FUNCTION FN_HC_GET_TIPO_COMP_STOCK(@TCOMP_IN_S VARCHAR(2))
RETURNS VARCHAR(100)
AS
BEGIN
	RETURN 
	CASE @TCOMP_IN_S
	-- VENTAS
	WHEN 'FC' THEN 'Factura' 
	WHEN 'FR' THEN 'Factura remito' 
	WHEN 'CC' THEN 'Nota de crédito' 
	WHEN 'DC' THEN 'Nota de débito' 
	WHEN 'RC' THEN 'Recibo'
	WHEN 'RE' THEN 'Remito'
	WHEN 'DR' THEN 'Devolución de remito' 
	-- COMPRAS
	WHEN 'FP' THEN 'Factura' 
	WHEN 'FS' THEN 'Factura remito' 
	WHEN 'CP' THEN 'Nota de crédito' 
	WHEN 'DP' THEN 'Nota de débito' 
	WHEN 'OP' THEN 'Orden de pago' 
	WHEN 'RP' THEN 'Remito' 
	WHEN 'DS' THEN 'Devolución de remito' 
	-- STOCK
	WHEN 'AJ' THEN 'Ajuste' 
	WHEN 'AR' THEN 'Armado' 
	WHEN 'TI' THEN 'Transferencia' 
	WHEN 'VS' THEN 'Egreso' 
	WHEN 'VE' THEN 'Ingreso' 
	-- RESTO
	WHEN 'ME' THEN 'Descarga batch' 
	WHEN 'CR' THEN 'Comanda' 
	ELSE '' END;

END
GO




--DESTINO

IF EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'HC_SINCRO_STOCK_MOVIMIENTO_DESTINO')
	DROP TABLE HC_SINCRO_STOCK_MOVIMIENTO_DESTINO
GO

CREATE TABLE HC_SINCRO_STOCK_MOVIMIENTO_DESTINO
(
ID_HC_SINCRO_STOCK_MOVIMIENTO_DESTINO INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
--TIPO_SINCRO VARCHAR(3) COLLATE Latin1_General_BIN NOT NULL,
ORIG_ID_STA14 INT NOT NULL,
ORIG_TCOMP_IN_S VARCHAR(2) COLLATE Latin1_General_BIN NOT NULL,
ORIG_NCOMP_IN_S VARCHAR(8) COLLATE Latin1_General_BIN NOT NULL,
ORIG_FECHA_MOV DATETIME NOT NULL,
ORIG_T_COMP VARCHAR(3) COLLATE Latin1_General_BIN NOT NULL,
ORIG_N_COMP VARCHAR(14) COLLATE Latin1_General_BIN NOT NULL,
ORIG_COD_PRO_CL VARCHAR(6) COLLATE Latin1_General_BIN NOT NULL,
DEST_TCOMP_IN_S VARCHAR(2) COLLATE Latin1_General_BIN NOT NULL,
DEST_NCOMP_IN_S VARCHAR(8) COLLATE Latin1_General_BIN NOT NULL,
DEST_ANU_TCOMP_IN_S VARCHAR(2) COLLATE Latin1_General_BIN,
DEST_ANU_NCOMP_IN_S VARCHAR(8) COLLATE Latin1_General_BIN,
FECHA_ULTIMA_SINCRO DATETIME NOT NULL
)




CREATE UNIQUE NONCLUSTERED INDEX IX_0 ON HC_SINCRO_STOCK_MOVIMIENTO_DESTINO
(
	--ORIG_TCOMP_IN_S,
	--ORIG_NCOMP_IN_S
	ORIG_ID_STA14
)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_1 ON HC_SINCRO_STOCK_MOVIMIENTO_DESTINO
(
	DEST_TCOMP_IN_S,
	DEST_NCOMP_IN_S
)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_2 ON HC_SINCRO_STOCK_MOVIMIENTO_DESTINO
(
	DEST_ANU_TCOMP_IN_S,
	DEST_ANU_NCOMP_IN_S
)
WHERE DEST_ANU_TCOMP_IN_S IS NOT NULL AND DEST_ANU_NCOMP_IN_S IS NOT NULL
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE VIEW VIEW_HC_SINCRO_STOCK_MOVIMIENTOS
AS
SELECT 
DBO.FN_HC_GET_TIPO_COMP_STOCK(SINCRO.ORIG_TCOMP_IN_S) AS COMPROBANTE,
SINCRO.ORIG_TCOMP_IN_S AS TIPO_INTERNO,
SINCRO.ORIG_NCOMP_IN_S AS NRO_INTERNO,
SINCRO.ORIG_FECHA_MOV AS FECHA_MOV,
SINCRO.ORIG_T_COMP AS TIPO,
SINCRO.ORIG_N_COMP AS NRO,
SINCRO.ORIG_COD_PRO_CL AS COD_CLIENTE,
SINCRO.FECHA_ULTIMA_SINCRO,
STA14.T_COMP AS SINC_TIPO,
STA14.N_COMP  AS SINC_NRO,
STA14_ANU.T_COMP AS SINC_ANU_TIPO,
STA14_ANU.N_COMP AS SINC_ANU_NRO
FROM HC_SINCRO_STOCK_MOVIMIENTO_DESTINO AS SINCRO
LEFT JOIN STA14 ON SINCRO.DEST_TCOMP_IN_S = STA14.TCOMP_IN_S AND SINCRO.DEST_NCOMP_IN_S = STA14.NCOMP_IN_S
LEFT JOIN STA14 AS STA14_ANU ON SINCRO.DEST_TCOMP_IN_S = STA14_ANU.TCOMP_IN_S AND SINCRO.DEST_NCOMP_IN_S = STA14_ANU.NCOMP_IN_S
GO

